<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title><%= title %></title>
</head>
<body>
<h1><%= title %></h1>

<form action="">
    <input type="range" id="maxFileSize" min="0" max="30" value="<%= sliderCurrentFileSize %>">
    <label for="maxFileSize" id="maxFileSizeLabel"><%= sliderCurrentFileSize %> B</label>
    <br>
    <br>
    <input type="checkbox" id="useAwait">
    <label for="useAwait">Should use await?</label>
    <br>
    <br>
    <input type="button" value="Submit" onclick="callSpeed();return false;">
</form>

<div>
    <h2>Mbps Graph</h2>
    <canvas id="speedChart"></canvas>
</div>
<div>
    <h2>ms latency Graph</h2>
    <canvas id="latencyChart"></canvas>
</div>

<script>


  const generateRange = (numberOfColumns) => {
    const range = ['1 B']

    for (const x of Array(numberOfColumns).keys()) {
      const val = Math.pow(2, x + 1)
      if (x >= 20) {
        range.push(val / 1024 / 1024 + ' mB')
      } else if (x >= 10) {
        range.push(val / 1024 + ' kB')
      } else {
        range.push(val + ' B')
      }
    }

    return range
  }

  const extractDataIndex = (labelName) => {
    const lastTwoChars = labelName.slice(-2)
    const number = Number(labelName.match(/\d+/)[0])
    let index = Math.log2(number)

    if (lastTwoChars === 'kb') {
      index += 10;
    } else if (lastTwoChars === 'mb') {
      index += 20;
    }

    return index
  }

  const processStackData = (field, value, latency, datasetIndex) => {
    const dataIndex = extractDataIndex(field);
    speedChart.data.datasets[datasetIndex].data[dataIndex] = value
    latencyChart.data.datasets[datasetIndex].data[dataIndex] = latency
  }

  const newChart = (element) =>
    new Chart(element, {
      type: 'bar',
      data: {
        labels: generateRange(<%= sliderCurrentFileSize %>),
        datasets: [
          {
            label: 'download',
            data: [],
            backgroundColor: ['blue'],
          }, {
            label: 'upload',
            data: [],
            backgroundColor: ['green'],
          }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

  const speedChart = newChart(document.getElementById('speedChart'))
  const latencyChart = newChart(document.getElementById('latencyChart'))

  const ws = new WebSocket('ws://<%= appUrl %>');

  ws.addEventListener('message', (message) => {
    const messageData = JSON.parse(message.data)

    console.log(messageData)

    if (messageData.type === 'download') {
      processStackData(messageData.field, messageData.value, messageData.latency, 0)
    }

    if (messageData.type === 'upload') {
      processStackData(messageData.field, messageData.value, messageData.latency, 1)
    }

    speedChart.update();
    latencyChart.update();
  });


  const callSpeed = () => {
    speedChart.data.datasets[0].data = []
    speedChart.data.datasets[1].data = []
    speedChart.update()

    latencyChart.data.datasets[0].data = []
    latencyChart.data.datasets[1].data = []
    latencyChart.update()

    ws.send(JSON.stringify({
      maxFileSize: document.getElementById('maxFileSize').value,
      useAwait: document.getElementById('useAwait').checked
    }));
  }

  const slider = document.getElementById('maxFileSize');
  const label = document.getElementById('maxFileSizeLabel');

  const inputHandler = function (e) {
    const inputValue = Number(e.target.value ?? slider.value)
    const generatedRange = generateRange(inputValue);

    label.innerHTML = generatedRange.slice(-1)[0];

    speedChart.data.labels = generatedRange
    latencyChart.data.labels = generatedRange

    for (let i = inputValue; i < 30; i++) {
      speedChart.data.datasets[0].data[i + 1] = 0
      speedChart.data.datasets[1].data[i + 1] = 0

      latencyChart.data.datasets[0].data[i + 1] = 0
      latencyChart.data.datasets[1].data[i + 1] = 0
    }

    speedChart.update()
    latencyChart.update()
  }
  slider.addEventListener('input', inputHandler);
  window.addEventListener('load', inputHandler);

</script>
</body>
</html>
